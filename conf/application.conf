# This is the main configuration file for the application.
# https://www.playframework.com/documentation/latest/ConfigFile

akka {
  # "akka.log-config-on-start" is extraordinarly useful because it log the complete
  # configuration at INFO level, including defaults and overrides, so it s worth
  # putting at the very top.
  #
  # Put the following in your conf/logback.xml file:
  #
  # <logger name="akka.actor" level="INFO" />
  #
  # And then uncomment this line to debug the configuration.
  #
  #log-config-on-start = true

  actor {
    provider = "cluster"

    deployment {
      /engineNode {
        router = cluster-metrics-adaptive-group

        routees {
          paths = ["/user/EngineNode"]
        }

        metrics-selector = mix

        cluster {
          enabled = on
          use-role = engine
          allow-local-routees = on
        }
      }
    }

    # Protobuf serializer for remote cluster metrics messages.
    serializers {
      akka-cluster-metrics = "akka.cluster.metrics.protobuf.MessageSerializer"
    }
    # Interface binding for remote cluster metrics messages.
    serialization-bindings {
      "akka.cluster.metrics.ClusterMetricsMessage" = akka-cluster-metrics
      "akka.cluster.metrics.AdaptiveLoadBalancingPool" = akka-cluster-metrics
      "akka.cluster.metrics.MixMetricsSelector" = akka-cluster-metrics
      "akka.cluster.metrics.CpuMetricsSelector$" = akka-cluster-metrics
      "akka.cluster.metrics.HeapMetricsSelector$" = akka-cluster-metrics
      "akka.cluster.metrics.SystemLoadAverageMetricsSelector$" = akka-cluster-metrics
    }
    # Globally unique metrics extension serializer identifier.
    serialization-identifiers {
      "akka.cluster.metrics.protobuf.MessageSerializer" = 10
    }
    #  Provide routing of messages based on cluster metrics.
    router.type-mapping {
      cluster-metrics-adaptive-pool  = "akka.cluster.metrics.AdaptiveLoadBalancingPool"
      cluster-metrics-adaptive-group = "akka.cluster.metrics.AdaptiveLoadBalancingGroup"
    }
  }

  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = "192.168.2.170"
      port = 5000
    }
  }

  # Enable metrics extension in akka-cluster-metrics.
  extensions = ["akka.cluster.metrics.ClusterMetricsExtension"]

  cluster {
    seed-nodes = [
      "akka.tcp://application@192.168.2.170:5000",
      "akka.tcp://application@192.168.2.171:3000",
      "akka.tcp://application@192.168.2.170:3000"]

    roles = [central]

    min-nr-of-members = 2

    role {
      central.min-nr-of-members = 1
      engine.min-nr-of-members = 1
    }

    shutdown-after-unsuccessful-join-seed-nodes = 20s

    metrics {
      # Disable legacy metrics in akka-cluster.
      enabled = off
      # Full path of dispatcher configuration key.
      # Use "" for default key `akka.actor.default-dispatcher`.
      dispatcher = ""
      # How long should any actor wait before starting the periodic tasks.
      periodic-tasks-initial-delay = 1s
      # Sigar native library extract location.
      # Use per-application-instance scoped location, such as program working directory.
      native-library-extract-folder = ${user.dir}/target/native
      # Metrics supervisor actor.
      supervisor {
        # Actor name. Example name space: /system/cluster-metrics
        name = "cluster-metrics"
        # Supervision strategy.
        strategy {
          #
          # FQCN of class providing `akka.actor.SupervisorStrategy`.
          # Must have a constructor with signature `<init>(com.typesafe.config.Config)`.
          # Default metrics strategy provider is a configurable extension of `OneForOneStrategy`.
          provider = "akka.cluster.metrics.ClusterMetricsStrategy"
          #
          # Configuration of the default strategy provider.
          # Replace with custom settings when overriding the provider.
          configuration = {
            # Log restart attempts.
            loggingEnabled = true
            # Child actor restart-on-failure window.
            withinTimeRange = 3s
            # Maximum number of restart attempts before child actor is stopped.
            maxNrOfRetries = 3
          }
        }
      }
      # Metrics collector actor.
      collector {
        # Enable or disable metrics collector for load-balancing nodes.
        # Metrics collection can also be controlled at runtime by sending control messages
        # to /system/cluster-metrics actor: `akka.cluster.metrics.{CollectionStartMessage,CollectionStopMessage}`
        enabled = on
        # FQCN of the metrics collector implementation.
        # It must implement `akka.cluster.metrics.MetricsCollector` and
        # have public constructor with akka.actor.ActorSystem parameter.
        # Will try to load in the following order of priority:
        # 1) configured custom collector 2) internal `SigarMetricsCollector` 3) internal `JmxMetricsCollector`
        provider = ""
        # Try all 3 available collector providers, or else fail on the configured custom collector provider.
        fallback = true
        # How often metrics are sampled on a node.
        # Shorter interval will collect the metrics more often.
        # Also controls frequency of the metrics publication to the node system event bus.
        sample-interval = 3s
        # How often a node publishes metrics information to the other nodes in the cluster.
        # Shorter interval will publish the metrics gossip more often.
        gossip-interval = 3s
        # How quickly the exponential weighting of past data is decayed compared to
        # new data. Set lower to increase the bias toward newer values.
        # The relevance of each data sample is halved for every passing half-life
        # duration, i.e. after 4 times the half-life, a data sample’s relevance is
        # reduced to 6% of its original relevance. The initial relevance of a data
        # sample is given by 1 – 0.5 ^ (collect-interval / half-life).
        moving-average-half-life = 12s
      }
    }
  }


  coordinated-shutdown.terminate-actor-system = on
}
